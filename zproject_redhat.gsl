#   Generate spec file for project
#
#   This is a code generator built using the iMatix GSL code generation
#   language. See https://github.com/imatix/gsl for details.
#
#   Copyright (c) the Contributors as noted in the AUTHORS file.
#   This file is part of zproject.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.

register_target ("redhat", "Packaging for RedHat")

.macro target_redhat
.directory.create ('packaging/redhat')
.output "packaging/redhat/$(project.name).spec"
#
#    $(project.name) - $(project.description?'':)
#
.   for project.license
#    $(string.trim (license.):block                                         )
.   endfor
#

Name:           $(project.name)
Version:        $(project->version.major).$(project->version.minor).$(project->version.patch)
Release:        1
Summary:        $(project.description)
License:        $(project.license?"MIT")
URL:            $(project.url?"http://example.com/")
Source0:        %{name}-%{version}.tar.gz
Group:          System/Libraries
BuildRequires:  ghostscript-core
BuildRequires:  asciidoc
BuildRequires:  automake
BuildRequires:  autoconf
BuildRequires:  libtool
BuildRequires:  pkgconfig
BuildRequires:  systemd-devel
BuildRequires:  xmlto
.if project.use_cxx
BuildRequires:  gcc-c++
.endif
.for project.use
.if defined(use.redhat_name)
BuildRequires:  $(use.redhat_name)
.else
BuildRequires:  $(use.project)-devel
.endif
.endfor
BuildRoot:      %{_tmppath}/%{name}-%{version}-build

%description
$(project.name) $(project.description).

.if project.exports_classes
%package -n $(project.libname)$(project->version.major)
Group:          System/Libraries
Summary:        $(project.description)

%description -n $(project.libname)$(project->version.major)
$(project.name) $(project.description).
This package contains shared library.

%post -n $(project.libname)$(project->version.major) -p /sbin/ldconfig
%postun -n $(project.libname)$(project->version.major) -p /sbin/ldconfig

%files -n $(project.libname)$(project->version.major)
%defattr(-,root,root)
.if file.exists ('COPYING')
%doc COPYING
.endif
%{_libdir}/$(project.libname).so.*

%package devel
Summary:        $(project.description)
Group:          System/Libraries
Requires:       $(project.libname)$(project->version.major) = %{version}
.for project.use
.if defined(use.redhat_name)
Requires:       $(use.redhat_name)
.else
Requires:       $(use.project)-devel
.endif
.endfor

%description devel
$(project.name) $(project.description).
This package contains development files.

%files devel
%defattr(-,root,root)
%{_includedir}/*
%{_libdir}/$(project.libname).so
%{_libdir}/pkgconfig/$(project.libname).pc
%{_mandir}/man3/*
%{_mandir}/man7/*
.endif

%prep
%setup -q

%build
sh autogen.sh
%{configure} --with-systemd-units
make %{_smp_mflags}

%install
make install DESTDIR=%{buildroot} %{?_smp_mflags}

# remove static libraries
find %{buildroot} -name '*.a' | xargs rm -f
find %{buildroot} -name '*.la' | xargs rm -f

.if has_main
%files
%defattr(-,root,root)
.if file.exists ('README.md')
%doc README.md
.endif
.if file.exists ('README.txt')
%doc README.txt
.endif
.if file.exists ('README.asciidoc')
%doc README.asciidoc
.endif
.if file.exists ('COPYING')
%doc COPYING
.endif
.# generate binary names
.for project.main where scope = "public"
%{_bindir}/$(main.name)
%{_mandir}/man1/$(main.name)*
.if file.exists ("src/$(main.name).cfg.example")
%{_sysconfdir}/$(project.name)/$(main.name).cfg.example
.endif
.endfor
.for project.bin
%{_bindir}/$(bin.name)
.endfor
.# generate service file names
.for project.main where main.service ?= 1
%config(noreplace) %{_sysconfdir}/$(project.name)/$(main.name).cfg
%{_prefix}/lib/systemd/system/$(main.name).service
.endfor
.endif

%changelog
.endmacro
